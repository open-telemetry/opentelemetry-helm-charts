name: Auto-apply chart label

on:
  pull_request:
    types: [opened, reopened, synchronize]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  label:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: Detect chart and apply label
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const {owner, repo} = context.repo;

            // List PR files
            const files = await github.paginate(github.rest.pulls.listFiles, {
              owner, repo, pull_number: pr.number, per_page: 100,
            });

            // Compute changed chart roots, ignoring generated outputs
            const chartRoots = new Set();
            for (const f of files) {
              const p = f.filename;
              if (!p.startsWith('charts/')) continue;
              if (p.match(/^charts\/[^/]+\/examples\/[^/]+\/rendered\//)) continue;
              const m = p.match(/^charts\/([^/]+)\//);
              if (m) chartRoots.add(m[1]);
            }

            if (chartRoots.size !== 1) {
              core.info(`Skipping auto chart labeling. chartRoots size=${chartRoots.size}`);
              return;
            }

            const chart = Array.from(chartRoots)[0];
            const desiredLabel = `chart:${chart}`;

            // Ensure label exists (create if missing)
            try {
              await github.rest.issues.getLabel({ owner, repo, name: desiredLabel });
            } catch (e) {
              core.info(`Creating missing label: ${desiredLabel}`);
              try {
                await github.rest.issues.createLabel({ owner, repo, name: desiredLabel, color: '87CEEB', description: 'chart target' });
              } catch (e2) {
                core.warning(`Failed to create label ${desiredLabel}: ${e2.message}`);
              }
            }

            // Current labels
            const current = pr.labels.map(l => l.name);
            const toRemove = current.filter(l => l.startsWith('chart:') && l !== desiredLabel);

            // Remove other chart:* labels
            for (const l of toRemove) {
              try {
                await github.rest.issues.removeLabel({ owner, repo, issue_number: pr.number, name: l });
              } catch (e) {
                core.info(`removeLabel ${l} skipped: ${e.message}`);
              }
            }

            // Add desired label if missing
            if (!current.includes(desiredLabel)) {
              await github.rest.issues.addLabels({ owner, repo, issue_number: pr.number, labels: [desiredLabel] });
              core.info(`Applied label ${desiredLabel}`);
            } else {
              core.info(`Label ${desiredLabel} already present`);
            }


