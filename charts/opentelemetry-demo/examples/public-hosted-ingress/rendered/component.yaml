---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: example-adservice
  labels:
    helm.sh/chart: opentelemetry-demo-0.31.0
    
    opentelemetry.io/name: example-adservice
    app.kubernetes.io/instance: example
    app.kubernetes.io/component: adservice
    app.kubernetes.io/name: example-adservice
    app.kubernetes.io/version: "1.10.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      name: tcp-service
      targetPort: 8080
  selector:
    
    opentelemetry.io/name: example-adservice
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: example-cartservice
  labels:
    helm.sh/chart: opentelemetry-demo-0.31.0
    
    opentelemetry.io/name: example-cartservice
    app.kubernetes.io/instance: example
    app.kubernetes.io/component: cartservice
    app.kubernetes.io/name: example-cartservice
    app.kubernetes.io/version: "1.10.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      name: tcp-service
      targetPort: 8080
  selector:
    
    opentelemetry.io/name: example-cartservice
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: example-checkoutservice
  labels:
    helm.sh/chart: opentelemetry-demo-0.31.0
    
    opentelemetry.io/name: example-checkoutservice
    app.kubernetes.io/instance: example
    app.kubernetes.io/component: checkoutservice
    app.kubernetes.io/name: example-checkoutservice
    app.kubernetes.io/version: "1.10.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      name: tcp-service
      targetPort: 8080
  selector:
    
    opentelemetry.io/name: example-checkoutservice
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: example-currencyservice
  labels:
    helm.sh/chart: opentelemetry-demo-0.31.0
    
    opentelemetry.io/name: example-currencyservice
    app.kubernetes.io/instance: example
    app.kubernetes.io/component: currencyservice
    app.kubernetes.io/name: example-currencyservice
    app.kubernetes.io/version: "1.10.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      name: tcp-service
      targetPort: 8080
  selector:
    
    opentelemetry.io/name: example-currencyservice
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: example-emailservice
  labels:
    helm.sh/chart: opentelemetry-demo-0.31.0
    
    opentelemetry.io/name: example-emailservice
    app.kubernetes.io/instance: example
    app.kubernetes.io/component: emailservice
    app.kubernetes.io/name: example-emailservice
    app.kubernetes.io/version: "1.10.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      name: tcp-service
      targetPort: 8080
  selector:
    
    opentelemetry.io/name: example-emailservice
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: example-flagd
  labels:
    helm.sh/chart: opentelemetry-demo-0.31.0
    
    opentelemetry.io/name: example-flagd
    app.kubernetes.io/instance: example
    app.kubernetes.io/component: flagd
    app.kubernetes.io/name: example-flagd
    app.kubernetes.io/version: "1.10.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8013
      name: tcp-service
      targetPort: 8013
  selector:
    
    opentelemetry.io/name: example-flagd
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: example-frontend
  labels:
    helm.sh/chart: opentelemetry-demo-0.31.0
    
    opentelemetry.io/name: example-frontend
    app.kubernetes.io/instance: example
    app.kubernetes.io/component: frontend
    app.kubernetes.io/name: example-frontend
    app.kubernetes.io/version: "1.10.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      name: tcp-service
      targetPort: 8080
  selector:
    
    opentelemetry.io/name: example-frontend
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: example-frontendproxy
  labels:
    helm.sh/chart: opentelemetry-demo-0.31.0
    
    opentelemetry.io/name: example-frontendproxy
    app.kubernetes.io/instance: example
    app.kubernetes.io/component: frontendproxy
    app.kubernetes.io/name: example-frontendproxy
    app.kubernetes.io/version: "1.10.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      name: tcp-service
      targetPort: 8080
  selector:
    
    opentelemetry.io/name: example-frontendproxy
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: example-imageprovider
  labels:
    helm.sh/chart: opentelemetry-demo-0.31.0
    
    opentelemetry.io/name: example-imageprovider
    app.kubernetes.io/instance: example
    app.kubernetes.io/component: imageprovider
    app.kubernetes.io/name: example-imageprovider
    app.kubernetes.io/version: "1.10.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8081
      name: tcp-service
      targetPort: 8081
  selector:
    
    opentelemetry.io/name: example-imageprovider
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: example-kafka
  labels:
    helm.sh/chart: opentelemetry-demo-0.31.0
    
    opentelemetry.io/name: example-kafka
    app.kubernetes.io/instance: example
    app.kubernetes.io/component: kafka
    app.kubernetes.io/name: example-kafka
    app.kubernetes.io/version: "1.10.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 9092
      name: plaintext
      targetPort: 9092
    - port: 9093
      name: controller
      targetPort: 9093
  selector:
    
    opentelemetry.io/name: example-kafka
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: example-loadgenerator
  labels:
    helm.sh/chart: opentelemetry-demo-0.31.0
    
    opentelemetry.io/name: example-loadgenerator
    app.kubernetes.io/instance: example
    app.kubernetes.io/component: loadgenerator
    app.kubernetes.io/name: example-loadgenerator
    app.kubernetes.io/version: "1.10.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8089
      name: tcp-service
      targetPort: 8089
  selector:
    
    opentelemetry.io/name: example-loadgenerator
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: example-paymentservice
  labels:
    helm.sh/chart: opentelemetry-demo-0.31.0
    
    opentelemetry.io/name: example-paymentservice
    app.kubernetes.io/instance: example
    app.kubernetes.io/component: paymentservice
    app.kubernetes.io/name: example-paymentservice
    app.kubernetes.io/version: "1.10.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      name: tcp-service
      targetPort: 8080
  selector:
    
    opentelemetry.io/name: example-paymentservice
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: example-productcatalogservice
  labels:
    helm.sh/chart: opentelemetry-demo-0.31.0
    
    opentelemetry.io/name: example-productcatalogservice
    app.kubernetes.io/instance: example
    app.kubernetes.io/component: productcatalogservice
    app.kubernetes.io/name: example-productcatalogservice
    app.kubernetes.io/version: "1.10.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      name: tcp-service
      targetPort: 8080
  selector:
    
    opentelemetry.io/name: example-productcatalogservice
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: example-quoteservice
  labels:
    helm.sh/chart: opentelemetry-demo-0.31.0
    
    opentelemetry.io/name: example-quoteservice
    app.kubernetes.io/instance: example
    app.kubernetes.io/component: quoteservice
    app.kubernetes.io/name: example-quoteservice
    app.kubernetes.io/version: "1.10.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      name: tcp-service
      targetPort: 8080
  selector:
    
    opentelemetry.io/name: example-quoteservice
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: example-recommendationservice
  labels:
    helm.sh/chart: opentelemetry-demo-0.31.0
    
    opentelemetry.io/name: example-recommendationservice
    app.kubernetes.io/instance: example
    app.kubernetes.io/component: recommendationservice
    app.kubernetes.io/name: example-recommendationservice
    app.kubernetes.io/version: "1.10.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      name: tcp-service
      targetPort: 8080
  selector:
    
    opentelemetry.io/name: example-recommendationservice
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: example-redis
  labels:
    helm.sh/chart: opentelemetry-demo-0.31.0
    
    opentelemetry.io/name: example-redis
    app.kubernetes.io/instance: example
    app.kubernetes.io/component: redis
    app.kubernetes.io/name: example-redis
    app.kubernetes.io/version: "1.10.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 6379
      name: redis
      targetPort: 6379
  selector:
    
    opentelemetry.io/name: example-redis
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: example-shippingservice
  labels:
    helm.sh/chart: opentelemetry-demo-0.31.0
    
    opentelemetry.io/name: example-shippingservice
    app.kubernetes.io/instance: example
    app.kubernetes.io/component: shippingservice
    app.kubernetes.io/name: example-shippingservice
    app.kubernetes.io/version: "1.10.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      name: tcp-service
      targetPort: 8080
  selector:
    
    opentelemetry.io/name: example-shippingservice
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-accountingservice
  labels:
    helm.sh/chart: opentelemetry-demo-0.31.0
    
    opentelemetry.io/name: example-accountingservice
    app.kubernetes.io/instance: example
    app.kubernetes.io/component: accountingservice
    app.kubernetes.io/name: example-accountingservice
    app.kubernetes.io/version: "1.10.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      
      opentelemetry.io/name: example-accountingservice
  template:
    metadata:
      labels:
        
        opentelemetry.io/name: example-accountingservice
        app.kubernetes.io/instance: example
        app.kubernetes.io/component: accountingservice
        app.kubernetes.io/name: example-accountingservice
    spec:
      serviceAccountName: example
      containers:
        - name: accountingservice
          image: 'ghcr.io/open-telemetry/demo:1.10.0-accountingservice'
          imagePullPolicy: IfNotPresent
          env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: 'example-otelcol'
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: KAFKA_SERVICE_ADDR
            value: 'example-kafka:9092'
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4317
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.10.0
          resources:
            limits:
              memory: 20Mi
          volumeMounts:
      volumes:
      initContainers:
        - command:
          - sh
          - -c
          - until nc -z -v -w30 example-kafka 9092; do echo waiting
            for kafka; sleep 2; done;
          image: busybox:latest
          name: wait-for-kafka
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-adservice
  labels:
    helm.sh/chart: opentelemetry-demo-0.31.0
    
    opentelemetry.io/name: example-adservice
    app.kubernetes.io/instance: example
    app.kubernetes.io/component: adservice
    app.kubernetes.io/name: example-adservice
    app.kubernetes.io/version: "1.10.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      
      opentelemetry.io/name: example-adservice
  template:
    metadata:
      labels:
        
        opentelemetry.io/name: example-adservice
        app.kubernetes.io/instance: example
        app.kubernetes.io/component: adservice
        app.kubernetes.io/name: example-adservice
    spec:
      serviceAccountName: example
      containers:
        - name: adservice
          image: 'ghcr.io/open-telemetry/demo:1.10.0-adservice'
          imagePullPolicy: IfNotPresent
          ports:
          
          - containerPort: 8080
            name: service
          env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: 'example-otelcol'
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: AD_SERVICE_PORT
            value: "8080"
          - name: FLAGD_HOST
            value: 'example-flagd'
          - name: FLAGD_PORT
            value: "8013"
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4318
          - name: OTEL_LOGS_EXPORTER
            value: otlp
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.10.0
          resources:
            limits:
              memory: 300Mi
          volumeMounts:
      volumes:
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-cartservice
  labels:
    helm.sh/chart: opentelemetry-demo-0.31.0
    
    opentelemetry.io/name: example-cartservice
    app.kubernetes.io/instance: example
    app.kubernetes.io/component: cartservice
    app.kubernetes.io/name: example-cartservice
    app.kubernetes.io/version: "1.10.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      
      opentelemetry.io/name: example-cartservice
  template:
    metadata:
      labels:
        
        opentelemetry.io/name: example-cartservice
        app.kubernetes.io/instance: example
        app.kubernetes.io/component: cartservice
        app.kubernetes.io/name: example-cartservice
    spec:
      serviceAccountName: example
      containers:
        - name: cartservice
          image: 'ghcr.io/open-telemetry/demo:1.10.0-cartservice'
          imagePullPolicy: IfNotPresent
          ports:
          
          - containerPort: 8080
            name: service
          env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: 'example-otelcol'
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: CART_SERVICE_PORT
            value: "8080"
          - name: ASPNETCORE_URLS
            value: http://*:$(CART_SERVICE_PORT)
          - name: REDIS_ADDR
            value: 'example-redis:6379'
          - name: FLAGD_HOST
            value: 'example-flagd'
          - name: FLAGD_PORT
            value: "8013"
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4317
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.10.0
          resources:
            limits:
              memory: 160Mi
          volumeMounts:
      volumes:
      initContainers:
        - command:
          - sh
          - -c
          - until nc -z -v -w30 example-redis 6379; do echo waiting
            for redis; sleep 2; done;
          image: busybox:latest
          name: wait-for-redis
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-checkoutservice
  labels:
    helm.sh/chart: opentelemetry-demo-0.31.0
    
    opentelemetry.io/name: example-checkoutservice
    app.kubernetes.io/instance: example
    app.kubernetes.io/component: checkoutservice
    app.kubernetes.io/name: example-checkoutservice
    app.kubernetes.io/version: "1.10.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      
      opentelemetry.io/name: example-checkoutservice
  template:
    metadata:
      labels:
        
        opentelemetry.io/name: example-checkoutservice
        app.kubernetes.io/instance: example
        app.kubernetes.io/component: checkoutservice
        app.kubernetes.io/name: example-checkoutservice
    spec:
      serviceAccountName: example
      containers:
        - name: checkoutservice
          image: 'ghcr.io/open-telemetry/demo:1.10.0-checkoutservice'
          imagePullPolicy: IfNotPresent
          ports:
          
          - containerPort: 8080
            name: service
          env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: 'example-otelcol'
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: CHECKOUT_SERVICE_PORT
            value: "8080"
          - name: CART_SERVICE_ADDR
            value: 'example-cartservice:8080'
          - name: CURRENCY_SERVICE_ADDR
            value: 'example-currencyservice:8080'
          - name: EMAIL_SERVICE_ADDR
            value: http://example-emailservice:8080
          - name: PAYMENT_SERVICE_ADDR
            value: 'example-paymentservice:8080'
          - name: PRODUCT_CATALOG_SERVICE_ADDR
            value: 'example-productcatalogservice:8080'
          - name: SHIPPING_SERVICE_ADDR
            value: 'example-shippingservice:8080'
          - name: KAFKA_SERVICE_ADDR
            value: 'example-kafka:9092'
          - name: FLAGD_HOST
            value: 'example-flagd'
          - name: FLAGD_PORT
            value: "8013"
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4317
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.10.0
          resources:
            limits:
              memory: 20Mi
          volumeMounts:
      volumes:
      initContainers:
        - command:
          - sh
          - -c
          - until nc -z -v -w30 example-kafka 9092; do echo waiting
            for kafka; sleep 2; done;
          image: busybox:latest
          name: wait-for-kafka
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-currencyservice
  labels:
    helm.sh/chart: opentelemetry-demo-0.31.0
    
    opentelemetry.io/name: example-currencyservice
    app.kubernetes.io/instance: example
    app.kubernetes.io/component: currencyservice
    app.kubernetes.io/name: example-currencyservice
    app.kubernetes.io/version: "1.10.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      
      opentelemetry.io/name: example-currencyservice
  template:
    metadata:
      labels:
        
        opentelemetry.io/name: example-currencyservice
        app.kubernetes.io/instance: example
        app.kubernetes.io/component: currencyservice
        app.kubernetes.io/name: example-currencyservice
    spec:
      serviceAccountName: example
      containers:
        - name: currencyservice
          image: 'ghcr.io/open-telemetry/demo:1.10.0-currencyservice'
          imagePullPolicy: IfNotPresent
          ports:
          
          - containerPort: 8080
            name: service
          env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: 'example-otelcol'
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: CURRENCY_SERVICE_PORT
            value: "8080"
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4317
          - name: VERSION
            value: '1.10.0'
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.10.0
          resources:
            limits:
              memory: 20Mi
          volumeMounts:
      volumes:
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-emailservice
  labels:
    helm.sh/chart: opentelemetry-demo-0.31.0
    
    opentelemetry.io/name: example-emailservice
    app.kubernetes.io/instance: example
    app.kubernetes.io/component: emailservice
    app.kubernetes.io/name: example-emailservice
    app.kubernetes.io/version: "1.10.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      
      opentelemetry.io/name: example-emailservice
  template:
    metadata:
      labels:
        
        opentelemetry.io/name: example-emailservice
        app.kubernetes.io/instance: example
        app.kubernetes.io/component: emailservice
        app.kubernetes.io/name: example-emailservice
    spec:
      serviceAccountName: example
      containers:
        - name: emailservice
          image: 'ghcr.io/open-telemetry/demo:1.10.0-emailservice'
          imagePullPolicy: IfNotPresent
          ports:
          
          - containerPort: 8080
            name: service
          env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: 'example-otelcol'
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: EMAIL_SERVICE_PORT
            value: "8080"
          - name: APP_ENV
            value: production
          - name: OTEL_EXPORTER_OTLP_TRACES_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4318/v1/traces
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.10.0
          resources:
            limits:
              memory: 100Mi
          volumeMounts:
      volumes:
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-flagd
  labels:
    helm.sh/chart: opentelemetry-demo-0.31.0
    
    opentelemetry.io/name: example-flagd
    app.kubernetes.io/instance: example
    app.kubernetes.io/component: flagd
    app.kubernetes.io/name: example-flagd
    app.kubernetes.io/version: "1.10.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      
      opentelemetry.io/name: example-flagd
  template:
    metadata:
      labels:
        
        opentelemetry.io/name: example-flagd
        app.kubernetes.io/instance: example
        app.kubernetes.io/component: flagd
        app.kubernetes.io/name: example-flagd
    spec:
      serviceAccountName: example
      containers:
        - name: flagd
          image: 'ghcr.io/open-feature/flagd:v0.10.1'
          imagePullPolicy: IfNotPresent
          command:
          - /flagd-build
          - start
          - --uri
          - file:./etc/flagd/demo.flagd.json
          ports:
          
          - containerPort: 8013
            name: service
          env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: 'example-otelcol'
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: FLAGD_METRICS_EXPORTER
            value: otel
          - name: FLAGD_OTEL_COLLECTOR_URI
            value: $(OTEL_COLLECTOR_NAME):4317
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.10.0
          resources:
            limits:
              memory: 50Mi
          volumeMounts:
            - name: config
              mountPath: /etc/flagd
      volumes:
        - name: config
          configMap:
            name: example-flagd-config
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-frauddetectionservice
  labels:
    helm.sh/chart: opentelemetry-demo-0.31.0
    
    opentelemetry.io/name: example-frauddetectionservice
    app.kubernetes.io/instance: example
    app.kubernetes.io/component: frauddetectionservice
    app.kubernetes.io/name: example-frauddetectionservice
    app.kubernetes.io/version: "1.10.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      
      opentelemetry.io/name: example-frauddetectionservice
  template:
    metadata:
      labels:
        
        opentelemetry.io/name: example-frauddetectionservice
        app.kubernetes.io/instance: example
        app.kubernetes.io/component: frauddetectionservice
        app.kubernetes.io/name: example-frauddetectionservice
    spec:
      serviceAccountName: example
      containers:
        - name: frauddetectionservice
          image: 'ghcr.io/open-telemetry/demo:1.10.0-frauddetectionservice'
          imagePullPolicy: IfNotPresent
          env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: 'example-otelcol'
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: KAFKA_SERVICE_ADDR
            value: 'example-kafka:9092'
          - name: FLAGD_HOST
            value: 'example-flagd'
          - name: FLAGD_PORT
            value: "8013"
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4318
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.10.0
          resources:
            limits:
              memory: 300Mi
          volumeMounts:
      volumes:
      initContainers:
        - command:
          - sh
          - -c
          - until nc -z -v -w30 example-kafka 9092; do echo waiting
            for kafka; sleep 2; done;
          image: busybox:latest
          name: wait-for-kafka
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-frontend
  labels:
    helm.sh/chart: opentelemetry-demo-0.31.0
    
    opentelemetry.io/name: example-frontend
    app.kubernetes.io/instance: example
    app.kubernetes.io/component: frontend
    app.kubernetes.io/name: example-frontend
    app.kubernetes.io/version: "1.10.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      
      opentelemetry.io/name: example-frontend
  template:
    metadata:
      labels:
        
        opentelemetry.io/name: example-frontend
        app.kubernetes.io/instance: example
        app.kubernetes.io/component: frontend
        app.kubernetes.io/name: example-frontend
    spec:
      serviceAccountName: example
      containers:
        - name: frontend
          image: 'ghcr.io/open-telemetry/demo:1.10.0-frontend'
          imagePullPolicy: IfNotPresent
          ports:
          
          - containerPort: 8080
            name: service
          env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: 'example-otelcol'
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: FRONTEND_PORT
            value: "8080"
          - name: FRONTEND_ADDR
            value: :8080
          - name: AD_SERVICE_ADDR
            value: 'example-adservice:8080'
          - name: CART_SERVICE_ADDR
            value: 'example-cartservice:8080'
          - name: CHECKOUT_SERVICE_ADDR
            value: 'example-checkoutservice:8080'
          - name: CURRENCY_SERVICE_ADDR
            value: 'example-currencyservice:8080'
          - name: PRODUCT_CATALOG_SERVICE_ADDR
            value: 'example-productcatalogservice:8080'
          - name: RECOMMENDATION_SERVICE_ADDR
            value: 'example-recommendationservice:8080'
          - name: SHIPPING_SERVICE_ADDR
            value: 'example-shippingservice:8080'
          - name: FLAGD_HOST
            value: 'example-flagd'
          - name: FLAGD_PORT
            value: "8013"
          - name: OTEL_COLLECTOR_HOST
            value: $(OTEL_COLLECTOR_NAME)
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4317
          - name: WEB_OTEL_SERVICE_NAME
            value: frontend-web
          - name: PUBLIC_OTEL_EXPORTER_OTLP_TRACES_ENDPOINT
            value: https://otel-demo-collector.example.com/v1/traces
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.10.0
          resources:
            limits:
              memory: 250Mi
          securityContext:
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
          volumeMounts:
      volumes:
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-frontendproxy
  labels:
    helm.sh/chart: opentelemetry-demo-0.31.0
    
    opentelemetry.io/name: example-frontendproxy
    app.kubernetes.io/instance: example
    app.kubernetes.io/component: frontendproxy
    app.kubernetes.io/name: example-frontendproxy
    app.kubernetes.io/version: "1.10.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      
      opentelemetry.io/name: example-frontendproxy
  template:
    metadata:
      labels:
        
        opentelemetry.io/name: example-frontendproxy
        app.kubernetes.io/instance: example
        app.kubernetes.io/component: frontendproxy
        app.kubernetes.io/name: example-frontendproxy
    spec:
      serviceAccountName: example
      containers:
        - name: frontendproxy
          image: 'ghcr.io/open-telemetry/demo:1.10.0-frontendproxy'
          imagePullPolicy: IfNotPresent
          ports:
          
          - containerPort: 8080
            name: service
          env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: 'example-otelcol'
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: ENVOY_PORT
            value: "8080"
          - name: FLAGD_HOST
            value: 'example-flagd'
          - name: FLAGD_PORT
            value: "8013"
          - name: FRONTEND_HOST
            value: 'example-frontend'
          - name: FRONTEND_PORT
            value: "8080"
          - name: GRAFANA_SERVICE_HOST
            value: 'example-grafana'
          - name: GRAFANA_SERVICE_PORT
            value: "80"
          - name: IMAGE_PROVIDER_HOST
            value: 'example-imageprovider'
          - name: IMAGE_PROVIDER_PORT
            value: "8081"
          - name: JAEGER_SERVICE_HOST
            value: 'example-jaeger-query'
          - name: JAEGER_SERVICE_PORT
            value: "16686"
          - name: LOCUST_WEB_HOST
            value: 'example-loadgenerator'
          - name: LOCUST_WEB_PORT
            value: "8089"
          - name: OTEL_COLLECTOR_HOST
            value: $(OTEL_COLLECTOR_NAME)
          - name: OTEL_COLLECTOR_PORT_GRPC
            value: "4317"
          - name: OTEL_COLLECTOR_PORT_HTTP
            value: "4318"
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.10.0
          resources:
            limits:
              memory: 50Mi
          securityContext:
            runAsGroup: 101
            runAsNonRoot: true
            runAsUser: 101
          volumeMounts:
      volumes:
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-imageprovider
  labels:
    helm.sh/chart: opentelemetry-demo-0.31.0
    
    opentelemetry.io/name: example-imageprovider
    app.kubernetes.io/instance: example
    app.kubernetes.io/component: imageprovider
    app.kubernetes.io/name: example-imageprovider
    app.kubernetes.io/version: "1.10.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      
      opentelemetry.io/name: example-imageprovider
  template:
    metadata:
      labels:
        
        opentelemetry.io/name: example-imageprovider
        app.kubernetes.io/instance: example
        app.kubernetes.io/component: imageprovider
        app.kubernetes.io/name: example-imageprovider
    spec:
      serviceAccountName: example
      containers:
        - name: imageprovider
          image: 'ghcr.io/open-telemetry/demo:1.10.0-imageprovider'
          imagePullPolicy: IfNotPresent
          ports:
          
          - containerPort: 8081
            name: service
          env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: 'example-otelcol'
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: IMAGE_PROVIDER_PORT
            value: "8081"
          - name: OTEL_COLLECTOR_PORT_GRPC
            value: "4317"
          - name: OTEL_COLLECTOR_HOST
            value: $(OTEL_COLLECTOR_NAME)
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.10.0
          resources:
            limits:
              memory: 50Mi
          volumeMounts:
      volumes:
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-kafka
  labels:
    helm.sh/chart: opentelemetry-demo-0.31.0
    
    opentelemetry.io/name: example-kafka
    app.kubernetes.io/instance: example
    app.kubernetes.io/component: kafka
    app.kubernetes.io/name: example-kafka
    app.kubernetes.io/version: "1.10.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      
      opentelemetry.io/name: example-kafka
  template:
    metadata:
      labels:
        
        opentelemetry.io/name: example-kafka
        app.kubernetes.io/instance: example
        app.kubernetes.io/component: kafka
        app.kubernetes.io/name: example-kafka
    spec:
      serviceAccountName: example
      containers:
        - name: kafka
          image: 'ghcr.io/open-telemetry/demo:1.10.0-kafka'
          imagePullPolicy: IfNotPresent
          ports:
          
          - containerPort: 9092
            name: plaintext
          - containerPort: 9093
            name: controller
          env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: 'example-otelcol'
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: KAFKA_ADVERTISED_LISTENERS
            value: PLAINTEXT://example-kafka:9092
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4318
          - name: KAFKA_HEAP_OPTS
            value: -Xmx400M -Xms400M
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.10.0
          resources:
            limits:
              memory: 600Mi
          securityContext:
            runAsGroup: 1000
            runAsNonRoot: true
            runAsUser: 1000
          volumeMounts:
      volumes:
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-loadgenerator
  labels:
    helm.sh/chart: opentelemetry-demo-0.31.0
    
    opentelemetry.io/name: example-loadgenerator
    app.kubernetes.io/instance: example
    app.kubernetes.io/component: loadgenerator
    app.kubernetes.io/name: example-loadgenerator
    app.kubernetes.io/version: "1.10.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      
      opentelemetry.io/name: example-loadgenerator
  template:
    metadata:
      labels:
        
        opentelemetry.io/name: example-loadgenerator
        app.kubernetes.io/instance: example
        app.kubernetes.io/component: loadgenerator
        app.kubernetes.io/name: example-loadgenerator
    spec:
      serviceAccountName: example
      containers:
        - name: loadgenerator
          image: 'ghcr.io/open-telemetry/demo:1.10.0-loadgenerator'
          imagePullPolicy: IfNotPresent
          ports:
          
          - containerPort: 8089
            name: service
          env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: 'example-otelcol'
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: LOCUST_WEB_PORT
            value: "8089"
          - name: LOCUST_USERS
            value: "10"
          - name: LOCUST_SPAWN_RATE
            value: "1"
          - name: LOCUST_HOST
            value: http://example-frontendproxy:8080
          - name: LOCUST_HEADLESS
            value: "false"
          - name: LOCUST_AUTOSTART
            value: "true"
          - name: LOCUST_BROWSER_TRAFFIC_ENABLED
            value: "true"
          - name: PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION
            value: python
          - name: FLAGD_HOST
            value: 'example-flagd'
          - name: FLAGD_PORT
            value: "8013"
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4317
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.10.0
          resources:
            limits:
              memory: 1Gi
          volumeMounts:
      volumes:
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-paymentservice
  labels:
    helm.sh/chart: opentelemetry-demo-0.31.0
    
    opentelemetry.io/name: example-paymentservice
    app.kubernetes.io/instance: example
    app.kubernetes.io/component: paymentservice
    app.kubernetes.io/name: example-paymentservice
    app.kubernetes.io/version: "1.10.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      
      opentelemetry.io/name: example-paymentservice
  template:
    metadata:
      labels:
        
        opentelemetry.io/name: example-paymentservice
        app.kubernetes.io/instance: example
        app.kubernetes.io/component: paymentservice
        app.kubernetes.io/name: example-paymentservice
    spec:
      serviceAccountName: example
      containers:
        - name: paymentservice
          image: 'ghcr.io/open-telemetry/demo:1.10.0-paymentservice'
          imagePullPolicy: IfNotPresent
          ports:
          
          - containerPort: 8080
            name: service
          env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: 'example-otelcol'
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: PAYMENT_SERVICE_PORT
            value: "8080"
          - name: FLAGD_HOST
            value: 'example-flagd'
          - name: FLAGD_PORT
            value: "8013"
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4317
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.10.0
          resources:
            limits:
              memory: 120Mi
          securityContext:
            runAsGroup: 1000
            runAsNonRoot: true
            runAsUser: 1000
          volumeMounts:
      volumes:
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-productcatalogservice
  labels:
    helm.sh/chart: opentelemetry-demo-0.31.0
    
    opentelemetry.io/name: example-productcatalogservice
    app.kubernetes.io/instance: example
    app.kubernetes.io/component: productcatalogservice
    app.kubernetes.io/name: example-productcatalogservice
    app.kubernetes.io/version: "1.10.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      
      opentelemetry.io/name: example-productcatalogservice
  template:
    metadata:
      labels:
        
        opentelemetry.io/name: example-productcatalogservice
        app.kubernetes.io/instance: example
        app.kubernetes.io/component: productcatalogservice
        app.kubernetes.io/name: example-productcatalogservice
    spec:
      serviceAccountName: example
      containers:
        - name: productcatalogservice
          image: 'ghcr.io/open-telemetry/demo:1.10.0-productcatalogservice'
          imagePullPolicy: IfNotPresent
          ports:
          
          - containerPort: 8080
            name: service
          env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: 'example-otelcol'
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: PRODUCT_CATALOG_SERVICE_PORT
            value: "8080"
          - name: FLAGD_HOST
            value: 'example-flagd'
          - name: FLAGD_PORT
            value: "8013"
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4317
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.10.0
          resources:
            limits:
              memory: 20Mi
          volumeMounts:
      volumes:
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-quoteservice
  labels:
    helm.sh/chart: opentelemetry-demo-0.31.0
    
    opentelemetry.io/name: example-quoteservice
    app.kubernetes.io/instance: example
    app.kubernetes.io/component: quoteservice
    app.kubernetes.io/name: example-quoteservice
    app.kubernetes.io/version: "1.10.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      
      opentelemetry.io/name: example-quoteservice
  template:
    metadata:
      labels:
        
        opentelemetry.io/name: example-quoteservice
        app.kubernetes.io/instance: example
        app.kubernetes.io/component: quoteservice
        app.kubernetes.io/name: example-quoteservice
    spec:
      serviceAccountName: example
      containers:
        - name: quoteservice
          image: 'ghcr.io/open-telemetry/demo:1.10.0-quoteservice'
          imagePullPolicy: IfNotPresent
          ports:
          
          - containerPort: 8080
            name: service
          env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: 'example-otelcol'
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: QUOTE_SERVICE_PORT
            value: "8080"
          - name: OTEL_PHP_AUTOLOAD_ENABLED
            value: "true"
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4318
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.10.0
          resources:
            limits:
              memory: 40Mi
          securityContext:
            runAsGroup: 33
            runAsNonRoot: true
            runAsUser: 33
          volumeMounts:
      volumes:
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-recommendationservice
  labels:
    helm.sh/chart: opentelemetry-demo-0.31.0
    
    opentelemetry.io/name: example-recommendationservice
    app.kubernetes.io/instance: example
    app.kubernetes.io/component: recommendationservice
    app.kubernetes.io/name: example-recommendationservice
    app.kubernetes.io/version: "1.10.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      
      opentelemetry.io/name: example-recommendationservice
  template:
    metadata:
      labels:
        
        opentelemetry.io/name: example-recommendationservice
        app.kubernetes.io/instance: example
        app.kubernetes.io/component: recommendationservice
        app.kubernetes.io/name: example-recommendationservice
    spec:
      serviceAccountName: example
      containers:
        - name: recommendationservice
          image: 'ghcr.io/open-telemetry/demo:1.10.0-recommendationservice'
          imagePullPolicy: IfNotPresent
          ports:
          
          - containerPort: 8080
            name: service
          env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: 'example-otelcol'
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: RECOMMENDATION_SERVICE_PORT
            value: "8080"
          - name: PRODUCT_CATALOG_SERVICE_ADDR
            value: 'example-productcatalogservice:8080'
          - name: OTEL_PYTHON_LOG_CORRELATION
            value: "true"
          - name: PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION
            value: python
          - name: FLAGD_HOST
            value: 'example-flagd'
          - name: FLAGD_PORT
            value: "8013"
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4317
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.10.0
          resources:
            limits:
              memory: 500Mi
          volumeMounts:
      volumes:
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-redis
  labels:
    helm.sh/chart: opentelemetry-demo-0.31.0
    
    opentelemetry.io/name: example-redis
    app.kubernetes.io/instance: example
    app.kubernetes.io/component: redis
    app.kubernetes.io/name: example-redis
    app.kubernetes.io/version: "1.10.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      
      opentelemetry.io/name: example-redis
  template:
    metadata:
      labels:
        
        opentelemetry.io/name: example-redis
        app.kubernetes.io/instance: example
        app.kubernetes.io/component: redis
        app.kubernetes.io/name: example-redis
    spec:
      serviceAccountName: example
      containers:
        - name: redis
          image: 'redis:7.2-alpine'
          imagePullPolicy: IfNotPresent
          ports:
          
          - containerPort: 6379
            name: redis
          env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: 'example-otelcol'
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.10.0
          resources:
            limits:
              memory: 20Mi
          securityContext:
            runAsGroup: 1000
            runAsNonRoot: true
            runAsUser: 999
          volumeMounts:
      volumes:
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-shippingservice
  labels:
    helm.sh/chart: opentelemetry-demo-0.31.0
    
    opentelemetry.io/name: example-shippingservice
    app.kubernetes.io/instance: example
    app.kubernetes.io/component: shippingservice
    app.kubernetes.io/name: example-shippingservice
    app.kubernetes.io/version: "1.10.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      
      opentelemetry.io/name: example-shippingservice
  template:
    metadata:
      labels:
        
        opentelemetry.io/name: example-shippingservice
        app.kubernetes.io/instance: example
        app.kubernetes.io/component: shippingservice
        app.kubernetes.io/name: example-shippingservice
    spec:
      serviceAccountName: example
      containers:
        - name: shippingservice
          image: 'ghcr.io/open-telemetry/demo:1.10.0-shippingservice'
          imagePullPolicy: IfNotPresent
          ports:
          
          - containerPort: 8080
            name: service
          env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: 'example-otelcol'
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: SHIPPING_SERVICE_PORT
            value: "8080"
          - name: QUOTE_SERVICE_ADDR
            value: http://example-quoteservice:8080
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4317
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.10.0
          resources:
            limits:
              memory: 20Mi
          volumeMounts:
      volumes:
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: "networking.k8s.io/v1"
kind: Ingress
metadata:
  name: example-frontendproxy
  labels:
    helm.sh/chart: opentelemetry-demo-0.31.0
    
    opentelemetry.io/name: example-frontendproxy
    app.kubernetes.io/instance: example
    app.kubernetes.io/component: frontendproxy
    app.kubernetes.io/name: example-frontendproxy
    app.kubernetes.io/version: "1.10.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  rules:
    - host: "otel-demo.example.com"
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: example-frontendproxy
                port:
                  number: 8080
