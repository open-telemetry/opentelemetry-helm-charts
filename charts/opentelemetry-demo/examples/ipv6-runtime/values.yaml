components:
  frontend-proxy:
    envOverrides:
      - name: ENVOY_ADDR
        value: "[::]"

  currency:
    envOverrides:
      - name: IPV6_ENABLED
        value: "true"

  payment:
    envOverrides:
      - name: IPV6_ENABLED
        value: "true"

  quote:
    envOverrides:
      - name: IPV6_ENABLED
        value: "true"

  shipping:
    envOverrides:
      - name: IPV6_ENABLED
        value: "true"

# Note: This is the default opentelemetry-collector config with ipv6 adjusted syntax
# which can be identified with the square brackets []
opentelemetry-collector:
  config:
    receivers:
      otlp:
        protocols:
          http:
            endpoint: "[${env:MY_POD_IP}]:4318"
            cors:
              allowed_origins:
                - "http://*"
                - "https://*"
          grpc:
            endpoint: "[${env:MY_POD_IP}]:4317"
      httpcheck/frontend-proxy:
        targets:
          - endpoint: http://frontend-proxy:8080
      redis:
        endpoint: "valkey-cart:6379"
        collection_interval: 10s
      jaeger:
        protocols:
          grpc:
            endpoint: "[${env:MY_POD_IP}]:14250"
          thrift_http:
            endpoint: "[${env:MY_POD_IP}]:14268"
          thrift_compact:
            endpoint: "[${env:MY_POD_IP}]:6831"
      prometheus:
        config:
          scrape_configs:
            - job_name: opentelemetry-collector
              static_configs:
                - targets:
                    - "[${env:MY_POD_IP}]:8888"
      zipkin:
        endpoint: "[${env:MY_POD_IP}]:9411"

    exporters:
      otlp:
        endpoint: jaeger-collector:4317
        tls:
          insecure: true
      otlphttp/prometheus:
        endpoint: http://prometheus:9090/api/v1/otlp
        tls:
          insecure: true
      opensearch:
        logs_index: otel
        http:
          endpoint: http://opensearch:9200
          tls:
            insecure: true

    extensions:
      health_check:
        endpoint: "[${env:MY_POD_IP}]:13133"

    processors:
      transform:
        error_mode: ignore
        trace_statements:
          - context: span
            statements:
              - replace_pattern(name, "\\?.*", "")
              - replace_match(name, "GET /api/products/*", "GET /api/products/{productId}")
      resource:
        attributes:
        - key: service.instance.id
          from_attribute: k8s.pod.uid
          action: insert

    connectors:
      spanmetrics: {}

    service:
      pipelines:
        traces:
          processors: [memory_limiter, resource, transform, batch]
          exporters: [otlp, debug, spanmetrics]
        metrics:
          receivers: [httpcheck/frontend-proxy, redis, otlp, spanmetrics]
          processors: [memory_limiter, resource, batch]
          exporters: [otlphttp/prometheus, debug]
        logs:
          processors: [memory_limiter, resource, batch]
          exporters: [opensearch, debug]
      telemetry:
        metrics:
          level: detailed
          readers:
            - periodic:
                interval: 10000
                timeout: 5000
                exporter:
                  otlp:
                    protocol: grpc
                    endpoint: otel-collector:4318
            - pull:
                exporter:
                  prometheus:
                    host: "[${env:MY_POD_IP}]"
                    port: 8888
