observability:
  # collector settings are configured in the opentelemetry-collector section.
  otelcol:
    enabled: true
  jaeger:
    enabled: true
    image:
      repository: jaegertracing/all-in-one
      # Overrides the image tag whose default is the chart appVersion.
      tag: "latest"
      pullPolicy: IfNotPresent
      pullSecrets: []
    args: ["--memory.max-traces", "10000", "--query.base-path", "/jaeger/ui"]
    resources:
      limits:
        memory: 275Mi
    schedulingRules:
      nodeSelector: {}
      affinity: {}
      tolerations: []
    serviceType: "ClusterIP"
  prometheus:
    enabled: true
  grafana:
    enabled: true

default:
  # list of environment variables applied to all components
  env:
    - name: OTEL_SERVICE_NAME
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: "metadata.labels['app.kubernetes.io/component']"
    - name: OTEL_K8S_NAMESPACE
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: metadata.namespace
    - name: OTEL_K8S_NODE_NAME
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: spec.nodeName
    - name: OTEL_K8S_POD_NAME
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: metadata.name
    - name: OTEL_RESOURCE_ATTRIBUTES
      value: service.name=$(OTEL_SERVICE_NAME),k8s.namespace.name=$(OTEL_K8S_NAMESPACE),k8s.node.name=$(OTEL_K8S_NODE_NAME),k8s.pod.name=$(OTEL_K8S_POD_NAME)
  # Allows overriding and additions to .Values.default.env
  envOverrides: []
  #  - name: OTEL_K8S_NODE_NAME
  #    value: "someConstantValue"
  image:
    repository: otel/demo
    # Overrides the image tag whose default is the chart appVersion.
    # The service's name will be applied to the end of this value.
    tag: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
  schedulingRules:
    nodeSelector: {}
    affinity: {}
    tolerations: []

serviceAccount: ""

components:
  redis:
    enabled: true
    useDefault:
      env: true

    # Options to override the default image settings.
    imageOverride:
      repository: "redis"
      tag: "alpine"
    ports:
      - name: redis
        value: 6379
    resources:
      limits:
        memory: 20Mi
    schedulingRules:
      nodeSelector: {}
      affinity: {}
      tolerations: []

  adService:
    enabled: true
    useDefault:
      env: true

    imageOverride: {}
    serviceType: ClusterIP
    schedulingRules:
      nodeSelector: {}
      affinity: {}
      tolerations: []
    servicePort: 8080
    env:
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: 'http://{{ include "otel-demo.name" . }}-otelcol:4317'
      - name: AD_SERVICE_PORT
        value: "8080"
    envOverrides: []
    podAnnotations: {}
    resources:
      limits:
        memory: 300Mi

  cartService:
    enabled: true
    useDefault:
      env: true

    imageOverride: {}
    serviceType: ClusterIP
    schedulingRules:
      nodeSelector: {}
      affinity: {}
      tolerations: []
    servicePort: 8080
    env:
      - name: ASPNETCORE_URLS
        value: http://*:8080
      - name: REDIS_ADDR
        value: '{{ include "otel-demo.name" . }}-redis:6379'
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: 'http://{{ include "otel-demo.name" . }}-otelcol:4317'
      - name: CART_SERVICE_PORT
        value: "8080"
    envOverrides: []
    podAnnotations: {}
    resources:
      limits:
        memory: 160Mi

  checkoutService:
    enabled: true
    useDefault:
      env: true

    imageOverride: {}
    serviceType: ClusterIP
    schedulingRules:
      nodeSelector: {}
      affinity: {}
      tolerations: []
    servicePort: 8080
    env:
      - name: CART_SERVICE_ADDR
        value: '{{ include "otel-demo.name" . }}-cartservice:8080'
      - name: CURRENCY_SERVICE_ADDR
        value: '{{ include "otel-demo.name" . }}-currencyservice:8080'
      - name: PAYMENT_SERVICE_ADDR
        value: '{{ include "otel-demo.name" . }}-paymentservice:8080'
      - name: PRODUCT_CATALOG_SERVICE_ADDR
        value: '{{ include "otel-demo.name" . }}-productcatalogservice:8080'
      - name: SHIPPING_SERVICE_ADDR
        value: '{{ include "otel-demo.name" . }}-shippingservice:8080'
      - name: EMAIL_SERVICE_ADDR
        value: 'http://{{ include "otel-demo.name" . }}-emailservice:8080'
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: 'http://{{ include "otel-demo.name" . }}-otelcol:4317'
      - name: CHECKOUT_SERVICE_PORT
        value: "8080"
    envOverrides: []
    podAnnotations: {}
    resources:
      limits:
        memory: 20Mi

  currencyService:
    enabled: true
    useDefault:
      env: true

    imageOverride: {}
    schedulingRules:
      nodeSelector: {}
      affinity: {}
      tolerations: []
    serviceType: ClusterIP
    servicePort: 8080
    env:
      - name: PORT
        value: "8080"
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: 'http://{{ include "otel-demo.name" . }}-otelcol:4317'
      - name: CURRENCY_SERVICE_PORT
        value: "8080"
    envOverrides: []
    podAnnotations: {}
    resources:
      limits:
        memory: 20Mi


  emailService:
    enabled: true
    useDefault:
      env: true

    imageOverride: {}
    serviceType: ClusterIP
    schedulingRules:
      nodeSelector: {}
      affinity: {}
      tolerations: []
    servicePort: 8080
    env:
      - name: APP_ENV
        value: production
      - name: PORT
        value: "8080"
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: 'http://{{ include "otel-demo.name" . }}-otelcol:4317'
      - name: OTEL_EXPORTER_OTLP_TRACES_ENDPOINT
        value: 'http://{{ include "otel-demo.name" . }}-otelcol:4318/v1/traces'
      - name: EMAIL_SERVICE_PORT
        value: "8080"
    envOverrides: []
    podAnnotations: {}
    resources:
      limits:
        memory: 100Mi

  featureflagService:
    enabled: true
    useDefault:
      env: true

    imageOverride: {}
    schedulingRules:
      nodeSelector: {}
      affinity: {}
      tolerations: []
    env:
      - name: FEATURE_FLAG_GRPC_SERVICE_PORT
        value: "50053"
      - name: FEATURE_FLAG_SERVICE_PORT
        value: "8081"
      - name: OTEL_EXPORTER_OTLP_TRACES_PROTOCOL
        value: grpc
      - name: DATABASE_URL
        value: 'ecto://ffs:ffs@{{ include "otel-demo.name" . }}-ffspostgres:5432/ffs'
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: 'http://{{ include "otel-demo.name" . }}-otelcol:4317'
    envOverrides: []
    serviceType: ClusterIP
    ports:
      - name: grpc
        value: 50053
      - name: http
        value: 8081
    podAnnotations: {}
    resources:
      limits:
        memory: 160Mi


  ffsPostgres:
    enabled: true
    useDefault:
      env: true

    imageOverride:
      repository: "postgres"
      tag: "14"
    schedulingRules:
      nodeSelector: {}
      affinity: {}
      tolerations: []
    env:
      - name: POSTGRES_DB
        value: ffs
      - name: POSTGRES_PASSWORD
        value: ffs
      - name: POSTGRES_USER
        value: ffs
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: 'http://{{ include "otel-demo.name" . }}-otelcol:4317'
    envOverrides: []
    serviceType: ClusterIP
    ports:
      - name: postgres
        value: 5432
    podAnnotations: {}
    resources:
      limits:
        memory: 120Mi


  frontend:
    enabled: true
    useDefault:
      env: true

    imageOverride: {}
    schedulingRules:
      nodeSelector: {}
      affinity: {}
      tolerations: []
    serviceType: ClusterIP
    servicePort: 8080
    env:
      - name: FRONTEND_ADDR
        value: :8080
      - name: AD_SERVICE_ADDR
        value: '{{ include "otel-demo.name" . }}-adservice:8080'
      - name: CART_SERVICE_ADDR
        value: '{{ include "otel-demo.name" . }}-cartservice:8080'
      - name: CHECKOUT_SERVICE_ADDR
        value: '{{ include "otel-demo.name" . }}-checkoutservice:8080'
      - name: CURRENCY_SERVICE_ADDR
        value: '{{ include "otel-demo.name" . }}-currencyservice:8080'
      - name: PRODUCT_CATALOG_SERVICE_ADDR
        value: '{{ include "otel-demo.name" . }}-productcatalogservice:8080'
      - name: RECOMMENDATION_SERVICE_ADDR
        value: '{{ include "otel-demo.name" . }}-recommendationservice:8080'
      - name: SHIPPING_SERVICE_ADDR
        value: '{{ include "otel-demo.name" . }}-shippingservice:8080'
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: 'http://{{ include "otel-demo.name" . }}-otelcol:4317'
      - name: FRONTEND_PORT
        value: "8080"
      - name: PUBLIC_OTEL_EXPORTER_OTLP_TRACES_ENDPOINT
        value: http://localhost:4318/v1/traces             # This expects users to use `kubectl port-forward ...`
    envOverrides: []
    podAnnotations: {}
    resources:
      limits:
        memory: 200Mi


  frontendProxy:
    enabled: true
    useDefault:
      env: true

    imageOverride: {}
    schedulingRules:
      nodeSelector: {}
      affinity: {}
      tolerations: []
    serviceType: ClusterIP
    servicePort: 8080
    env:
      - name: FRONTEND_PORT
        value: "8080"
      - name: FRONTEND_HOST
        value: '{{ include "otel-demo.name" . }}-frontend'
      - name: FEATURE_FLAG_SERVICE_PORT
        value: "8081"
      - name: FEATURE_FLAG_SERVICE_HOST
        value: '{{ include "otel-demo.name" . }}-featureflagservice'
      - name: LOCUST_WEB_PORT
        value: "8089"
      - name: LOCUST_WEB_HOST
        value: '{{ include "otel-demo.name" . }}-loadgenerator'
      - name: GRAFANA_SERVICE_PORT
        value: "80"
      - name: GRAFANA_SERVICE_HOST
        value: '{{ include "otel-demo.name" . }}-grafana'
      - name: JAEGER_SERVICE_PORT
        value: "16686"
      - name: JAEGER_SERVICE_HOST
        value: '{{ include "otel-demo.name" . }}-jaeger'
      - name: ENVOY_PORT
        value: "8080"
      - name: ENVOY_UID
        value: "0"
    podAnnotations: {}
    resources:
      limits:
        memory: 20Mi

  loadgenerator:
    enabled: true
    useDefault:
      env: true

    imageOverride: {}
    schedulingRules:
      nodeSelector: {}
      affinity: {}
      tolerations: []
    serviceType: ClusterIP
    servicePort: 8089
    env:
      - name: FRONTEND_ADDR
        value: '{{ include "otel-demo.name" . }}-frontend:8080'
      - name: LOCUST_WEB_PORT
        value: "8089"
      - name: LOCUST_USERS
        value: "10"
      - name: LOCUST_HOST
        value: "http://$(FRONTEND_ADDR)"
      - name: LOCUST_HEADLESS
        value: "false"
      - name: LOCUST_AUTOSTART
        value: "true"
      - name: PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION
        value: python
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: 'http://{{ include "otel-demo.name" . }}-otelcol:4317'
      - name: LOADGENERATOR_PORT
        value: "8089"
    envOverrides: []
    podAnnotations: {}
    resources:
      limits:
        memory: 120Mi

  paymentService:
    enabled: true
    useDefault:
      env: true

    imageOverride: {}
    schedulingRules:
      nodeSelector: {}
      affinity: {}
      tolerations: []
    serviceType: ClusterIP
    servicePort: 8080
    env:
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: 'http://{{ include "otel-demo.name" . }}-otelcol:4317'
      - name: PAYMENT_SERVICE_PORT
        value: "8080"
    envOverrides: []
    podAnnotations: {}
    resources:
      limits:
        memory: 70Mi

  productCatalogService:
    enabled: true
    useDefault:
      env: true

    imageOverride: {}
    schedulingRules:
      nodeSelector: {}
      affinity: {}
      tolerations: []
    serviceType: ClusterIP
    servicePort: 8080
    env:
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: 'http://{{ include "otel-demo.name" . }}-otelcol:4317'
      - name: PRODUCT_CATALOG_SERVICE_PORT
        value: "8080"
      - name: FEATURE_FLAG_GRPC_SERVICE_ADDR
        value: '{{ include "otel-demo.name" . }}-featureflagservice:50053'
    envOverrides: []
    podAnnotations: {}
    resources:
      limits:
        memory: 20Mi

  recommendationService:
    enabled: true
    useDefault:
      env: true

    imageOverride: {}
    schedulingRules:
      nodeSelector: {}
      affinity: {}
      tolerations: []
    serviceType: ClusterIP
    servicePort: 8080
    env:
      - name: OTEL_PYTHON_LOG_CORRELATION
        value: "true"
      - name: PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION
        value: python
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: 'http://{{ include "otel-demo.name" . }}-otelcol:4317'
      - name: FEATURE_FLAG_GRPC_SERVICE_ADDR
        value: '{{ include "otel-demo.name" . }}-featureflagservice:50053'
      - name: RECOMMENDATION_SERVICE_PORT
        value: "8080"
      - name: PRODUCT_CATALOG_SERVICE_ADDR
        value: '{{ include "otel-demo.name" . }}-productcatalogservice:8080'
    envOverrides: []
    podAnnotations: {}
    resources:
      limits:
        memory: 500Mi            # This is high to enable supporting the recommendationCache feature flag use case

  shippingService:
    enabled: true
    useDefault:
      env: true

    imageOverride: {}
    schedulingRules:
      nodeSelector: {}
      affinity: {}
      tolerations: []
    serviceType: ClusterIP
    servicePort: 8080
    env:
      - name: PORT
        value: "8080"
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: 'http://{{ include "otel-demo.name" . }}-otelcol:4317'
      - name: OTEL_EXPORTER_OTLP_TRACES_ENDPOINT
        value: 'http://{{ include "otel-demo.name" . }}-otelcol:4317'
      - name: SHIPPING_SERVICE_PORT
        value: "8080"
      - name: QUOTE_SERVICE_ADDR
        value: 'http://{{ include "otel-demo.name" . }}-quoteservice:8080'
    envOverrides: []
    podAnnotations: {}
    resources:
      limits:
        memory: 20Mi

  quoteService:
    enabled: true
    useDefault:
      env: true

    imageOverride: {}
    schedulingRules:
      nodeSelector: {}
      affinity: {}
      tolerations: []
    serviceType: ClusterIP
    servicePort: 8080
    env:
      - name: OTEL_TRACES_SAMPLER
        value: "parentbased_always_on"
      - name: OTEL_TRACES_EXPORTER
        value: "otlp"
      - name: OTEL_EXPORTER_OTLP_TRACES_PROTOCOL
        value: "grpc"
      - name: OTEL_PHP_TRACES_PROCESSOR
        value: "simple"
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: '{{ include "otel-demo.name" . }}-otelcol:4317'
      - name: QUOTE_SERVICE_PORT
        value: "8080"
    envOverrides: []
    podAnnotations: {}
    resources:
      limits:
        memory: 30Mi

opentelemetry-collector:
  nameOverride: otelcol
  mode: deployment
  resources:
    limits:
      memory: 100Mi
  service:
    type: ClusterIP
  ports:
    metrics:
      enabled: true
    prometheus:
      enabled: true
      containerPort: 9464
      servicePort: 9464
      protocol: TCP
  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9464"
    opentelemetry_community_demo: "true"
  config:
    receivers:
      otlp:
        protocols:
          grpc:
          http:
            cors:
              allowed_origins:
                - "http://*"
                - "https://*"

    exporters:
      otlp:
        endpoint: '{{ include "otel-demo.name" . }}-jaeger:4317'
        tls:
          insecure: true
      prometheus:
        endpoint: '0.0.0.0:9464'

    processors:
      spanmetrics:
        metrics_exporter: prometheus

    service:
      pipelines:
        traces:
          processors: [memory_limiter, spanmetrics, batch]
          exporters: [otlp, logging]
        metrics:
          exporters: [prometheus, logging]

prometheus:
  alertmanager:
    enabled: false
  configmapReload:
    prometheus:
      enabled: false
  kubeStateMetrics:
    enabled: false
  nodeExporter:
    enabled: false
  pushgateway:
    enabled: false

  server:
    global:
      scrape_interval: 5s
      scrape_timeout: 3s
      evaluation_interval: 30s
    service:
      servicePort: 9090

  serverFiles:
    prometheus.yml:
      scrape_configs:
        - job_name: 'opentelemetry-community-demo'
          kubernetes_sd_configs:
            - role: pod
          relabel_configs:
            - source_labels: [__meta_kubernetes_pod_annotation_opentelemetry_community_demo]
              action: keep
              regex: true

grafana:
  grafana.ini:
    auth:
      disable_login_form: true
    auth.anonymous:
      enabled: true
      org_name: Main Org.
      org_role: Admin
    server:
      root_url: "%(protocol)s://%(domain)s:%(http_port)s/grafana"
      serve_from_sub_path: true
  adminPassword: admin
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
        - name: Prometheus
          uid: webstore-metrics
          type: prometheus
          url: 'http://{{ include "otel-demo.name" . }}-prometheus-server:9090'
          editable: true
          isDefault: true
        - name: Jaeger
          uid: webstore-traces
          type: jaeger
          url: 'http://{{ include "otel-demo.name" . }}-jaeger:16686'
          editable: true
          isDefault: false
  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
        - name: 'default'
          orgId: 1
          folder: ''
          type: file
          disableDeletion: false
          editable: true
          options:
            path: /var/lib/grafana/dashboards/default
  dashboardsConfigMaps:
    default: '{{ include "otel-demo.name" . }}-grafana-dashboards'
