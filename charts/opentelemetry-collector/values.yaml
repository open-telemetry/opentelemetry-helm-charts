# Default values for opentelemetry-collector.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

nameOverride: ""
fullnameOverride: ""

config:
  exporters:
    logging: {}
  extensions:
    health_check: {}
    memory_ballast: {}
  processors:
    batch: {}
    # If set to null, will be overridden with values based on k8s resource limits
    memory_limiter: null
  receivers:
    jaeger:
      protocols:
        grpc:
          endpoint: 0.0.0.0:14250
        thrift_http:
          endpoint: 0.0.0.0:14268
        thrift_compact:
          endpoint: 0.0.0.0:6831
    otlp:
      protocols:
        grpc:
          endpoint: 0.0.0.0:4317
        http:
          endpoint: 0.0.0.0:4318
    prometheus:
      config:
        scrape_configs:
          - job_name: opentelemetry-collector
            scrape_interval: 10s
            static_configs:
              - targets:
                  - ${MY_POD_IP}:8888
    zipkin:
      endpoint: 0.0.0.0:9411
  service:
    telemetry:
      metrics:
        address: 0.0.0.0:8888
    extensions:
      - health_check
      - memory_ballast
    pipelines:
      logs:
        exporters:
          - logging
        processors:
          - memory_limiter
          - batch
        receivers:
          - otlp
      metrics:
        exporters:
          - logging
        processors:
          - memory_limiter
          - batch
        receivers:
          - otlp
          - prometheus
      traces:
        exporters:
          - logging
        processors:
          - memory_limiter
          - batch
        receivers:
          - otlp
          - jaeger
          - zipkin

# Shared params for agentCollector daemonset and standaloneCollector deployment pods.
# Can be overridden here or for any component independently using the same keys.

image:
  # If you want to use the core image `otel/opentelemetry-collector`, you also need to change `command.name` value to `otelcol`.
  repository: otel/opentelemetry-collector-contrib
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""
imagePullSecrets: []

# OpenTelemetry Collector executable
command:
  name: otelcol-contrib
  extraArgs: []

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

clusterRole:
  # Specifies whether a clusterRole should be created
  create: false
  # Annotations to add to the clusterRole
  annotations: {}
  # The name of the clusterRole to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""
  # A set of rules as documented here : https://kubernetes.io/docs/reference/access-authn-authz/rbac/
  rules: []
  # - apiGroups:
  #   - ''
  #   resources:
  #   - 'pods'
  #   - 'nodes'
  #   verbs:
  #   - 'get'
  #   - 'list'
  #   - 'watch'

  clusterRoleBinding:
    # Annotations to add to the clusterRoleBinding
    annotations: {}
    # The name of the clusterRoleBinding to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

podSecurityContext: {}
securityContext: {}

nodeSelector: {}
tolerations: []
affinity: {}

# Allows for pod scheduler prioritisation
# Can be overridden here or for agentCollector and standaloneCollector independently.
priorityClassName: ""

extraEnvs: []
extraConfigMapMounts: []
extraHostPathMounts: []
secretMounts: []

# Configuration for ports, shared between agentCollector, standaloneCollector and service.
# Can be overridden here or for agentCollector and standaloneCollector independently.
ports:
  otlp:
    enabled: true
    containerPort: 4317
    servicePort: 4317
    hostPort: 4317
    protocol: TCP
  otlp-http:
    enabled: true
    containerPort: 4318
    servicePort: 4318
    hostPort: 4318
    protocol: TCP
  jaeger-compact:
    enabled: true
    containerPort: 6831
    servicePort: 6831
    hostPort: 6831
    protocol: UDP
  jaeger-thrift:
    enabled: true
    containerPort: 14268
    servicePort: 14268
    hostPort: 14268
    protocol: TCP
  jaeger-grpc:
    enabled: true
    containerPort: 14250
    servicePort: 14250
    hostPort: 14250
    protocol: TCP
  zipkin:
    enabled: true
    containerPort: 9411
    servicePort: 9411
    hostPort: 9411
    protocol: TCP
  metrics:
    # The metrics port is disabled by default. However you need to enable the port
    # in order to use the ServiceMonitor (serviceMonitor.enabled) or PodMonitor (podMonitor.enabled).
    enabled: false
    containerPort: 8888
    servicePort: 8888
    protocol: TCP

# Configuration for agent OpenTelemetry Collector daemonset, enabled by default
agentCollector:
  enabled: true

  containerLogs:
    enabled: false

  resources:
    limits:
      cpu: 256m
      memory: 512Mi

  podAnnotations: {}

  podLabels: {}

  # Configuration override that will be merged into the agent's default config
  configOverride: {}
  # The following config override can be used to enable host receiver
  #   receivers:
  #     hostmetrics:
  #       scrapers:
  #         cpu:
  #         disk:
  #         filesystem:
  #   service:
  #     pipelines:
  #       metrics:
  #         receivers: [prometheus, hostmetrics]

  # Any of the top level options can be overridden specifically for agent
  # image: {}
  # imagePullSecrets: []
  # command: {}
  # serviceAccount: {}
  # podSecurityContext: {}
  # securityContext: {}
  # nodeSelector: {}
  # tolerations: []
  # affinity: {}
  # priorityClassName: ""

  # The following option overrides can be used with host receiver
  # extraEnvs:
  # - name: HOST_PROC
  #   value: /hostfs/proc
  # - name: HOST_SYS
  #   value: /hostfs/sys
  # - name: HOST_ETC
  #   value: /hostfs/etc
  # - name: HOST_VAR
  #   value: /hostfs/var
  # - name: HOST_RUN
  #   value: /hostfs/run
  # - name: HOST_DEV
  #   value: /hostfs/dev
  # extraHostPathMounts:
  # - name: hostfs
  #   hostPath: /
  #   mountPath: /hostfs
  #   readOnly: true
  #   mountPropagation: HostToContainer

  # The following example disables all jaeger ports and zipkin hostPort on the agent
  # ports:
  #   jaeger-thrift:
  #     enabled: false
  #   jaeger-grpc:
  #     enabled: false
  #   zipkin:
  #     hostPort: ""

# Configuration for standalone OpenTelemetry Collector deployment, disabled by default
standaloneCollector:
  enabled: false

  replicaCount: 1

  resources:
    limits:
      cpu: 1
      memory: 2Gi

  podAnnotations: {}

  podLabels: {}

  annotations: {}

  # Configuration override that will be merged into the standalone collector default config
  configOverride: {}

  # Any of the top level options can be overridden specifically for standalone collector
  # image: {}
  # imagePullSecrets: []
  # command: {}
  # serviceAccount: {}
  # podSecurityContext: {}
  # securityContext: {}
  # nodeSelector: {}
  # tolerations: []
  # affinity: {}
  # priorityClassName: ""
  # ports: {}

service:
  type: ClusterIP
  annotations: {}

ingress:
  enabled: false
  annotations: {}
#  ingressClassName: nginx
#  hosts:
#    - host: collector.example.com
#      paths:
#        - path: /
#          pathType: Prefix
#          port: 4318
#  tls:
#    - secretName: collector-tls
#      hosts:
#        - collector.example.com

podMonitor:
  # The pod monitor by default scrapes the metrics port.
  # The metrics port needs to be enabled as well.
  enabled: false
  metricsEndpoints:
  - port: metrics
    # interval: 15s

  # additional labels for the PodMonitor
  extraLabels: {}
  #   release: kube-prometheus-stack

serviceMonitor:
  # The service monitor by default scrapes the metrics port.
  # The metrics port needs to be enabled as well.
  enabled: false
  metricsEndpoints:
  - port: metrics
    # interval: 15s

  # additional labels for the ServiceMonitor
  extraLabels: {}
  #  release: kube-prometheus-stack

# PodDisruptionBudget is used only if standaloneCollector enabled
podDisruptionBudget:
  enabled: false
#   minAvailable: 2
#   maxUnavailable: 1

# autoscaling is used only if standaloneCollector enabled
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80
