# Default values for opentelemetry-collector.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

nameOverride: ""
fullnameOverride: ""

# Deployment mode of the chart:
# - deployment: as a standalone collector
# - daemonset: as an agent collector
mode: "daemonset"

# This chart includes
enabledConfigPresets:
  # If set to true, a receiver called filelog/k8s will be created.
  # This setting will only work with daemonset mode
  containerLogs: false
  # If set to true, receiver hostmetrics/k8s will be created in the config and
  #   additional supporting environment variables will be injected into the
  #   container. This setting will only work with daemonset mode
  hostMetrics: false
  # If set to true, a processor memory_limiter/k8s will be created with the pod
  #   resource limits set for the containers
  memoryLimiter: false

# Configuration to be passed to the collector. Because there is no good base
#  configuration and because of helm limitations it's difficult to delete keys
#  it is left empty for the user to fill
config: {}
#  exporters:
#    logging:
#  extensions:
#    # Healthcheck service is absolutely required, or the pods will get continually restarted
#    health_check:
#  processors:
#    batch:
#    # Note that memory_limiter/k8s is available if enabledConfigPresets.memory_limiter
#    memory_limiter:
#  receivers:
#    otlp:
#      protocols:
#        grpc:
#        http:
#    # Note that hostmetrics/k8s is available if enabledConfigPresets.memory_limiter
#    hostmetrics:
#  service:
#    extensions:
#      # Healthcheck service is absolutely required, or the pods will get continually restarted
#      - health_check
#    pipelines:
#      logs:
#        exporters:
#          - logging
#        processors:
#          - memory_limiter
#          - batch
#        receivers:
#          - otlp
#      metrics:
#        exporters:
#          - logging
#        processors:
#          - memory_limiter
#          - batch
#        receivers:
#          - hostmetrics
#          - otlp
#      traces:
#        exporters:
#          - logging
#        processors:
#          - memory_limiter
#          - batch
#        receivers:
#          - otlp


# Shared params for agentCollector daemonset and standaloneCollector deployment pods.
# Can be overridden here or for any component independently using the same keys.

image:
  # If you want to use the contrib image `otel/opentelemetry-collector-contrib`, you also need to change `command.name` value to `otelcontribcol`.
  repository: otel/opentelemetry-collector-contrib
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""
imagePullSecrets: []

# OpenTelemetry Collector executable
command:
  name: otelcontribcol
  extraArgs: []

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

clusterRole:
  # Specifies whether a clusterRole should be created
  create: false
  # Annotations to add to the clusterRole
  annotations: {}
  # The name of the clusterRole to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""
  # A set of rules as documented here : https://kubernetes.io/docs/reference/access-authn-authz/rbac/
  rules: []
  # - apiGroups:
  #   - ''
  #   resources:
  #   - 'pods'
  #   - 'nodes'
  #   verbs:
  #   - 'get'
  #   - 'list'
  #   - 'watch'

  clusterRoleBinding:
    # Annotations to add to the clusterRoleBinding
    annotations: {}
    # The name of the clusterRoleBinding to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""
podLabels: {}
podAnnotations: {}

podSecurityContext: {}
securityContext: {}

nodeSelector: {}
tolerations: []
affinity: {}

# Allows for pod scheduler prioritisation
# Can be overridden here or for agentCollector and standaloneCollector independently.
priorityClassName: ""

extraEnvs: []
extraConfigMapMounts: []
extraHostPathMounts: []
secretMounts: []

# Configuration for some default ports. Manually enable the ports for the receivers
#  enabled in the config
ports:
  otlp:
    enabled: false
    containerPort: 4317
    servicePort: 4317
    hostPort: 4317
    protocol: TCP
  jaeger-thrift:
    enabled: false
    containerPort: 14268
    servicePort: 14268
    hostPort: 14268
    protocol: TCP
  jaeger-grpc:
    enabled: false
    containerPort: 14250
    servicePort: 14250
    hostPort: 14250
    protocol: TCP
  zipkin:
    enabled: false
    containerPort: 9411
    servicePort: 9411
    hostPort: 9411
    protocol: TCP

resources:
  limits: {}
  requests: {}

service:
  enabled: false
  type: ClusterIP
  annotations: {}

monitor:
  # If mode daemonset, PodMonitor is set up
  # If mode deployment, ServiceMonitor is set up
  enabled: false
  metricsEndpoints: {}
  # - port: prometheus

  # additional labels for the PodMonitor
  extraLabels: {}
  #   release: kube-prometheus-stack

# replicaCount is only used if no autoscaling is enabled
replicaCount: 1
# autoscaling is used only activated if mode is deployment
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80
