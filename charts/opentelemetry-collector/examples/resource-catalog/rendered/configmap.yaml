---
# Source: opentelemetry-collector/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: example-opentelemetry-collector
  namespace: default
  labels:
    helm.sh/chart: opentelemetry-collector-0.112.2
    app.kubernetes.io/name: opentelemetry-collector
    app.kubernetes.io/instance: example
    app.kubernetes.io/version: "0.123.0"
    app.kubernetes.io/managed-by: Helm
    
data:
  relay: |
    exporters:
      coralogix/resource_catalog:
        application_name: resource
        domain: ""
        logs:
          headers:
            X-Coralogix-Distribution: helm-otel-integration/
            x-coralogix-ingress: metadata-as-otlp-logs/v1
        private_key: ${CORALOGIX_PRIVATE_KEY}
        subsystem_name: catalog
        timeout: 30s
      debug: {}
    extensions:
      health_check:
        endpoint: ${env:MY_POD_IP}:13133
    processors:
      batch: {}
      filter/workflow:
        error_mode: silent
        logs:
          log_record:
          - body["object"]["kind"] == "Pod" and not IsMatch(String(body["object"]["metadata"]["ownerReferences"]),
            ".*StatefulSet.*|.*ReplicaSet.*|.*Job.*|.*DaemonSet.*")
          - body["kind"] == "Pod" and not IsMatch(String(body["metadata"]["ownerReferences"]),
            ".*StatefulSet.*|.*ReplicaSet.*|.*Job.*|.*DaemonSet.*")
      memory_limiter:
        check_interval: 5s
        limit_percentage: 80
        spike_limit_percentage: 25
      resourcedetection/resource_catalog:
        azure:
          resource_attributes:
            azure.resourcegroup.name:
              enabled: false
            azure.vm.name:
              enabled: false
            azure.vm.scaleset.name:
              enabled: false
            azure.vm.size:
              enabled: false
            host.id:
              enabled: false
            host.name:
              enabled: false
        detectors:
        - eks
        - aks
        - gcp
        - ec2
        - azure
        ec2:
          resource_attributes:
            host.id:
              enabled: false
            host.image.id:
              enabled: false
            host.name:
              enabled: false
            host.type:
              enabled: false
        gcp:
          resource_attributes:
            host.id:
              enabled: false
            host.name:
              enabled: false
            host.type:
              enabled: false
            k8s.cluster.name:
              enabled: false
        override: true
        timeout: 2s
      transform/entity-event:
        error_mode: silent
        log_statements:
        - context: log
          statements:
          - set(attributes["otel.entity.interval"], Milliseconds(Duration("1h")))
    receivers:
      jaeger:
        protocols:
          grpc:
            endpoint: ${env:MY_POD_IP}:14250
          thrift_compact:
            endpoint: ${env:MY_POD_IP}:6831
          thrift_http:
            endpoint: ${env:MY_POD_IP}:14268
      k8sobjects/resource_catalog:
        objects:
        - group: ""
          mode: pull
          name: namespaces
        - group: ""
          mode: pull
          name: nodes
        - group: ""
          mode: pull
          name: persistentvolumeclaims
        - group: ""
          mode: pull
          name: persistentvolumes
        - group: ""
          mode: pull
          name: pods
        - group: ""
          mode: pull
          name: services
        - group: apps
          mode: pull
          name: daemonsets
        - group: apps
          mode: pull
          name: deployments
        - group: apps
          mode: pull
          name: replicasets
        - group: apps
          mode: pull
          name: statefulsets
        - group: autoscaling
          mode: pull
          name: horizontalpodautoscalers
        - group: batch
          mode: pull
          name: cronjobs
        - group: batch
          mode: pull
          name: jobs
        - group: extensions
          mode: pull
          name: ingresses
        - group: networking.k8s.io
          mode: pull
          name: ingresses
        - group: policy
          mode: pull
          name: poddisruptionbudgets
        - group: rbac.authorization.k8s.io
          mode: pull
          name: clusterrolebindings
        - group: rbac.authorization.k8s.io
          mode: pull
          name: clusterroles
        - group: rbac.authorization.k8s.io
          mode: pull
          name: rolebindings
        - group: rbac.authorization.k8s.io
          mode: pull
          name: roles
        - group: ""
          mode: watch
          name: namespaces
        - group: ""
          mode: watch
          name: nodes
        - group: ""
          mode: watch
          name: persistentvolumeclaims
        - group: ""
          mode: watch
          name: persistentvolumes
        - group: ""
          mode: watch
          name: pods
        - group: apps
          mode: watch
          name: daemonsets
        - group: apps
          mode: watch
          name: deployments
        - group: apps
          mode: watch
          name: replicasets
        - group: apps
          mode: watch
          name: statefulsets
        - group: autoscaling
          mode: watch
          name: horizontalpodautoscalers
        - group: batch
          mode: watch
          name: cronjobs
        - group: batch
          mode: watch
          name: jobs
        - group: extensions
          mode: watch
          name: ingresses
        - group: networking.k8s.io
          mode: watch
          name: ingresses
        - group: policy
          mode: watch
          name: poddisruptionbudgets
        - group: rbac.authorization.k8s.io
          mode: watch
          name: clusterrolebindings
        - group: rbac.authorization.k8s.io
          mode: watch
          name: clusterroles
        - group: rbac.authorization.k8s.io
          mode: watch
          name: rolebindings
        - group: rbac.authorization.k8s.io
          mode: watch
          name: roles
      otlp:
        protocols:
          grpc:
            endpoint: ${env:MY_POD_IP}:4317
          http:
            endpoint: ${env:MY_POD_IP}:4318
      prometheus:
        config:
          scrape_configs:
          - job_name: opentelemetry-collector
            scrape_interval: 10s
            static_configs:
            - targets:
              - ${env:MY_POD_IP}:8888
      zipkin:
        endpoint: ${env:MY_POD_IP}:9411
    service:
      extensions:
      - health_check
      pipelines:
        logs:
          exporters:
          - debug
          processors:
          - memory_limiter
          - batch
          receivers:
          - otlp
        logs/resource_catalog:
          exporters:
          - coralogix/resource_catalog
          processors:
          - memory_limiter
          - resourcedetection/resource_catalog
          - transform/entity-event
          - filter/workflow
          - resource/metadata
          - batch
          receivers:
          - k8sobjects/resource_catalog
        metrics:
          exporters:
          - debug
          processors:
          - memory_limiter
          - batch
          receivers:
          - otlp
          - prometheus
        traces:
          exporters:
          - debug
          processors:
          - memory_limiter
          - batch
          receivers:
          - otlp
          - jaeger
          - zipkin
      telemetry:
        logs:
          encoding: json
        metrics:
          readers:
          - pull:
              exporter:
                prometheus:
                  host: ${env:MY_POD_IP}
                  port: 8888
